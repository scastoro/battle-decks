{
  "version": 3,
  "sources": ["../../../src/game-session.ts", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Y0fWjc/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-Y0fWjc/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/scastoro/repos/battle-decks/.wrangler/tmp/dev-Sx1CnY",
  "sourcesContent": ["import {\n  GameState,\n  GamePhase,\n  VoteChoice,\n  VoteResult,\n  GameStatusResponse,\n  WebSocketMessage,\n  AdjacencyRecord,\n  GameRecord,\n  ConnectionMetadata\n} from './types/index';\n\nexport class GameSession {\n  private sql: SqlStorage;\n  private ctx: DurableObjectState;\n  private env: Env;\n\n  // In-memory game state (rebuilt from SQLite on hibernation wake-up)\n  private gameState: GameState | null = null;\n\n  constructor(ctx: DurableObjectState, env: Env) {\n    this.ctx = ctx;\n    this.env = env;\n    this.sql = ctx.storage.sql;\n\n    // Initialize SQLite tables\n    this.initializeTables();\n  }\n\n  private initializeTables(): void {\n    // Table for slide adjacency data (pre-computed relationships)\n    this.sql.exec(`\n      CREATE TABLE IF NOT EXISTS adjacency (\n        slide_id TEXT PRIMARY KEY,\n        logical_slides TEXT NOT NULL,\n        chaotic_slides TEXT NOT NULL\n      )\n    `);\n\n    // Table for game session data (persistent across hibernation)\n    this.sql.exec(`\n      CREATE TABLE IF NOT EXISTS game_session (\n        session_id TEXT PRIMARY KEY,\n        current_slide TEXT NOT NULL,\n        used_slides TEXT NOT NULL,\n        phase TEXT NOT NULL,\n        slide_count INTEGER NOT NULL,\n        max_slides INTEGER NOT NULL,\n        created_at INTEGER NOT NULL,\n        updated_at INTEGER NOT NULL\n      )\n    `);\n\n    // Optimize SQLite performance (2025 best practice)\n    this.sql.exec('PRAGMA optimize');\n\n    // Load mock data if tables are empty (for MVP)\n    this.loadMockDataIfNeeded();\n  }\n\n  private loadMockDataIfNeeded(): void {\n    const count = this.sql.exec('SELECT COUNT(*) as count FROM adjacency').one() as { count: number };\n    if (count.count === 0) {\n      this.loadMockSlideData();\n    }\n  }\n\n  private loadMockSlideData(): void {\n    // Mock slide data for MVP testing\n    const mockSlides = [\n      {\n        id: 'slide_1',\n        logical: ['slide_2', 'slide_3', 'slide_4'],\n        chaotic: ['slide_8', 'slide_9', 'slide_10']\n      },\n      {\n        id: 'slide_2',\n        logical: ['slide_1', 'slide_3', 'slide_5'],\n        chaotic: ['slide_7', 'slide_9', 'slide_10']\n      },\n      {\n        id: 'slide_3',\n        logical: ['slide_1', 'slide_2', 'slide_6'],\n        chaotic: ['slide_8', 'slide_10', 'slide_7']\n      },\n      {\n        id: 'slide_4',\n        logical: ['slide_1', 'slide_5', 'slide_6'],\n        chaotic: ['slide_9', 'slide_10', 'slide_8']\n      },\n      {\n        id: 'slide_5',\n        logical: ['slide_2', 'slide_4', 'slide_6'],\n        chaotic: ['slide_7', 'slide_8', 'slide_10']\n      },\n      {\n        id: 'slide_6',\n        logical: ['slide_3', 'slide_4', 'slide_5'],\n        chaotic: ['slide_7', 'slide_8', 'slide_9']\n      },\n      {\n        id: 'slide_7',\n        logical: ['slide_8', 'slide_9', 'slide_10'],\n        chaotic: ['slide_1', 'slide_2', 'slide_3']\n      },\n      {\n        id: 'slide_8',\n        logical: ['slide_7', 'slide_9', 'slide_10'],\n        chaotic: ['slide_1', 'slide_3', 'slide_4']\n      },\n      {\n        id: 'slide_9',\n        logical: ['slide_7', 'slide_8', 'slide_10'],\n        chaotic: ['slide_2', 'slide_4', 'slide_5']\n      },\n      {\n        id: 'slide_10',\n        logical: ['slide_7', 'slide_8', 'slide_9'],\n        chaotic: ['slide_3', 'slide_5', 'slide_6']\n      }\n    ];\n\n    for (const slide of mockSlides) {\n      this.sql.exec(\n        'INSERT INTO adjacency (slide_id, logical_slides, chaotic_slides) VALUES (?, ?, ?)',\n        slide.id,\n        JSON.stringify(slide.logical),\n        JSON.stringify(slide.chaotic)\n      );\n    }\n  }\n\n  // RPC method: Initialize a new game session\n  async initialize(): Promise<Response> {\n    const sessionId = this.ctx.id.toString();\n\n    this.gameState = {\n      sessionId,\n      currentSlide: 'slide_1',\n      usedSlides: new Set(['slide_1']),\n      phase: 'waiting',\n      votes: { logical: 0, chaotic: 0 },\n      voters: new Set(),\n      votingOpen: false,\n      timerEnd: 0,\n      slideCount: 1,\n      maxSlides: 10\n    };\n\n    await this.saveGameState();\n\n    return new Response(JSON.stringify({\n      success: true,\n      sessionId\n    }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // RPC method: Start the game\n  async startGame(deckId: string, maxSlides: number = 10): Promise<Response> {\n    await this.ensureGameStateLoaded();\n\n    if (!this.gameState) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Session not initialized'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    this.gameState.phase = 'presenting';\n    this.gameState.maxSlides = maxSlides;\n    this.gameState.timerEnd = Date.now() + 45000; // 45 seconds\n\n    await this.saveGameState();\n    this.startPresentationTimer();\n    this.broadcastGameState();\n\n    return new Response(JSON.stringify({\n      success: true,\n      gameState: this.getPublicGameState()\n    }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // RPC method: Submit a vote\n  async vote(userId: string, choice: VoteChoice): Promise<Response> {\n    await this.ensureGameStateLoaded();\n\n    if (!this.gameState || !this.gameState.votingOpen) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Voting is not currently open'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    if (this.gameState.voters.has(userId)) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'User has already voted'\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Record the vote\n    this.gameState.votes[choice]++;\n    this.gameState.voters.add(userId);\n\n    // Broadcast vote update to all connected clients\n    this.broadcastVoteUpdate();\n\n    return new Response(JSON.stringify({\n      success: true,\n      currentVotes: this.gameState.votes\n    }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // RPC method: Get current game status\n  async getStatus(): Promise<Response> {\n    await this.ensureGameStateLoaded();\n\n    if (!this.gameState) {\n      return new Response(JSON.stringify({\n        error: 'Session not found'\n      }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const response: GameStatusResponse = {\n      sessionId: this.gameState.sessionId,\n      currentSlide: this.gameState.currentSlide,\n      phase: this.gameState.phase,\n      votes: this.gameState.votes,\n      timeRemaining: Math.max(0, this.gameState.timerEnd - Date.now()),\n      slideCount: this.gameState.slideCount,\n      votingOpen: this.gameState.votingOpen\n    };\n\n    return new Response(JSON.stringify(response), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Handle WebSocket connections with Hibernation API\n  async handleWebSocket(request: Request): Promise<Response> {\n    const webSocketPair = new WebSocketPair();\n    const [client, server] = Object.values(webSocketPair);\n\n    // Use WebSocket Hibernation API (2025 best practice)\n    this.ctx.acceptWebSocket(server);\n\n    // Attach metadata to WebSocket for hibernation persistence\n    const metadata: ConnectionMetadata = {\n      joinedAt: Date.now(),\n      lastActivity: Date.now()\n    };\n\n    // Store metadata in a way that survives hibernation\n    server.serializeAttachment(metadata);\n\n    // Set up auto-response for ping/pong (avoids waking hibernating DO)\n    const pingRequest = new Request('ws://ping');\n    const pongResponse = new Response('pong');\n    this.ctx.setWebSocketAutoResponse(pingRequest, pongResponse);\n\n    // Send current game state to new client\n    await this.ensureGameStateLoaded();\n    if (this.gameState) {\n      this.sendToSocket(server, {\n        type: 'gameState',\n        data: this.getPublicGameState(),\n        timestamp: Date.now()\n      });\n    }\n\n    return new Response(null, {\n      status: 101,\n      webSocket: client,\n    });\n  }\n\n  // WebSocket message handler (called when DO wakes from hibernation)\n  async webSocketMessage(ws: WebSocket, message: string): Promise<void> {\n    try {\n      // Ensure game state is loaded (important after hibernation)\n      await this.ensureGameStateLoaded();\n\n      const data = JSON.parse(message);\n\n      // Update last activity\n      const metadata = ws.deserializeAttachment() as ConnectionMetadata;\n      metadata.lastActivity = Date.now();\n      ws.serializeAttachment(metadata);\n\n      // Handle different message types\n      switch (data.type) {\n        case 'ping':\n          this.sendToSocket(ws, {\n            type: 'pong',\n            data: { timestamp: Date.now() },\n            timestamp: Date.now()\n          });\n          break;\n\n        case 'join':\n          // Handle user joining\n          if (data.userId) {\n            metadata.userId = data.userId;\n            ws.serializeAttachment(metadata);\n          }\n          break;\n\n        default:\n          console.log('Unknown WebSocket message type:', data.type);\n      }\n    } catch (error) {\n      console.error('Error handling WebSocket message:', error);\n      this.sendToSocket(ws, {\n        type: 'error',\n        data: { message: 'Failed to process message' },\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  // WebSocket close handler\n  async webSocketClose(ws: WebSocket, code: number, reason: string, wasClean: boolean): Promise<void> {\n    // Clean up any resources if needed\n    // Note: Don't rely on this for critical cleanup since it may not always be called\n  }\n\n  // Alarm handler for game timers\n  async alarm(): Promise<void> {\n    await this.ensureGameStateLoaded();\n    if (!this.gameState) return;\n\n    if (this.gameState.phase === 'presenting') {\n      // Switch to voting phase\n      this.gameState.phase = 'voting';\n      this.startVotingTimer();\n    } else if (this.gameState.phase === 'voting') {\n      // Process votes and move to next slide\n      await this.processVotesAndAdvance();\n    }\n  }\n\n  // Ensure game state is loaded from SQLite (important after hibernation)\n  private async ensureGameStateLoaded(): Promise<void> {\n    if (!this.gameState) {\n      await this.loadGameState();\n    }\n  }\n\n  private async saveGameState(): Promise<void> {\n    if (!this.gameState) return;\n\n    this.sql.exec(`\n      INSERT OR REPLACE INTO game_session\n      (session_id, current_slide, used_slides, phase, slide_count, max_slides, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `,\n      this.gameState.sessionId,\n      this.gameState.currentSlide,\n      JSON.stringify(Array.from(this.gameState.usedSlides)),\n      this.gameState.phase,\n      this.gameState.slideCount,\n      this.gameState.maxSlides,\n      Date.now(),\n      Date.now()\n    );\n  }\n\n  private async loadGameState(): Promise<void> {\n    const result = this.sql.exec(\n      'SELECT * FROM game_session ORDER BY updated_at DESC LIMIT 1'\n    ).one() as GameRecord | null;\n\n    if (result) {\n      this.gameState = {\n        sessionId: result.session_id,\n        currentSlide: result.current_slide,\n        usedSlides: new Set(JSON.parse(result.used_slides)),\n        phase: result.phase as GamePhase,\n        votes: { logical: 0, chaotic: 0 },\n        voters: new Set(),\n        votingOpen: false,\n        timerEnd: 0,\n        slideCount: result.slide_count,\n        maxSlides: result.max_slides\n      };\n    }\n  }\n\n  private startPresentationTimer(): void {\n    this.ctx.storage.setAlarm(Date.now() + 45000);\n  }\n\n  private startVotingTimer(): void {\n    this.gameState!.votingOpen = true;\n    this.gameState!.voters.clear();\n    this.gameState!.votes = { logical: 0, chaotic: 0 };\n    this.ctx.storage.setAlarm(Date.now() + 10000);\n    this.broadcastGameState();\n  }\n\n  private async processVotesAndAdvance(): Promise<void> {\n    if (!this.gameState) return;\n\n    this.gameState.votingOpen = false;\n\n    // Determine winner\n    const winner = this.gameState.votes.logical > this.gameState.votes.chaotic ? 'logical' : 'chaotic';\n\n    // Get next slide options\n    const nextSlide = this.getNextSlide(winner);\n\n    if (!nextSlide || this.gameState.slideCount >= this.gameState.maxSlides) {\n      // Game finished\n      this.gameState.phase = 'finished';\n      this.broadcastGameState();\n      await this.saveGameState();\n      return;\n    }\n\n    // Advance to next slide\n    this.gameState.currentSlide = nextSlide;\n    this.gameState.usedSlides.add(nextSlide);\n    this.gameState.slideCount++;\n    this.gameState.phase = 'presenting';\n    this.gameState.timerEnd = Date.now() + 45000;\n\n    await this.saveGameState();\n    this.startPresentationTimer();\n    this.broadcastSlideChange(nextSlide);\n  }\n\n  private getNextSlide(choice: VoteChoice): string | null {\n    if (!this.gameState) return null;\n\n    const adjacency = this.sql.exec(\n      'SELECT * FROM adjacency WHERE slide_id = ?',\n      this.gameState.currentSlide\n    ).one() as AdjacencyRecord | null;\n\n    if (!adjacency) return null;\n\n    const options = choice === 'logical'\n      ? JSON.parse(adjacency.logical_slides)\n      : JSON.parse(adjacency.chaotic_slides);\n\n    // Find first unused slide\n    for (const slideId of options) {\n      if (!this.gameState.usedSlides.has(slideId)) {\n        return slideId;\n      }\n    }\n\n    return null;\n  }\n\n  private getPublicGameState() {\n    if (!this.gameState) return null;\n\n    return {\n      sessionId: this.gameState.sessionId,\n      currentSlide: this.gameState.currentSlide,\n      phase: this.gameState.phase,\n      votes: this.gameState.votes,\n      timeRemaining: Math.max(0, this.gameState.timerEnd - Date.now()),\n      slideCount: this.gameState.slideCount,\n      maxSlides: this.gameState.maxSlides,\n      votingOpen: this.gameState.votingOpen\n    };\n  }\n\n  private broadcastGameState(): void {\n    this.broadcast({\n      type: 'gameState',\n      data: this.getPublicGameState(),\n      timestamp: Date.now()\n    });\n  }\n\n  private broadcastVoteUpdate(): void {\n    this.broadcast({\n      type: 'voteUpdate',\n      data: { votes: this.gameState?.votes },\n      timestamp: Date.now()\n    });\n  }\n\n  private broadcastSlideChange(slideId: string): void {\n    this.broadcast({\n      type: 'slideChange',\n      data: { slideId },\n      timestamp: Date.now()\n    });\n  }\n\n  private broadcast(message: WebSocketMessage): void {\n    const messageStr = JSON.stringify(message);\n\n    // Get all hibernatable WebSockets\n    this.ctx.getWebSockets().forEach(ws => {\n      try {\n        ws.send(messageStr);\n      } catch (error) {\n        console.error('Error broadcasting to socket:', error);\n      }\n    });\n  }\n\n  private sendToSocket(socket: WebSocket, message: WebSocketMessage): void {\n    try {\n      socket.send(JSON.stringify(message));\n    } catch (error) {\n      console.error('Error sending to socket:', error);\n    }\n  }\n}", "import { VoteRequest, StartGameRequest } from './types/index';\nimport { GameSession } from './game-session';\n\n// Export the Durable Object class for Cloudflare\nexport { GameSession };\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const url = new URL(request.url);\n    const { pathname, searchParams } = url;\n\n    // Handle CORS preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 204,\n        headers: getCorsHeaders(),\n      });\n    }\n\n    try {\n      // Route static files\n      if (pathname === '/' || pathname === '/vote') {\n        return serveStaticFile('vote.html');\n      }\n\n      if (pathname === '/display') {\n        return serveStaticFile('display.html');\n      }\n\n      if (pathname === '/admin') {\n        return serveStaticFile('admin.html');\n      }\n\n      // Handle slide images from R2\n      const slideMatch = pathname.match(/^\\/slides\\/(.+)$/);\n      if (slideMatch) {\n        return await serveSlideImage(slideMatch[1], env.SLIDES);\n      }\n\n      // Handle API routes - all require a session ID\n      const sessionMatch = pathname.match(/^\\/session\\/([^\\/]+)\\/(.+)$/);\n      if (sessionMatch) {\n        const [, sessionId, action] = sessionMatch;\n        return await handleSessionRequest(sessionId, action, request, env);\n      }\n\n      // Handle session creation\n      if (pathname === '/create-session' && request.method === 'POST') {\n        return await createGameSession(request, env);\n      }\n\n      return new Response('Not Found', {\n        status: 404,\n        headers: getCorsHeaders()\n      });\n\n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response('Internal Server Error', {\n        status: 500,\n        headers: getCorsHeaders()\n      });\n    }\n  },\n};\n\nasync function handleSessionRequest(\n  sessionId: string,\n  action: string,\n  request: Request,\n  env: Env\n): Promise<Response> {\n  // Get the Durable Object instance using the session ID as the name\n  const id = env.GAME_SESSION.idFromName(sessionId);\n  const stub = env.GAME_SESSION.get(id);\n\n  switch (action) {\n    case 'vote':\n      if (request.method !== 'POST') {\n        return new Response('Method not allowed', {\n          status: 405,\n          headers: getCorsHeaders()\n        });\n      }\n      const voteData: VoteRequest = await request.json();\n      return await stub.vote(voteData.userId, voteData.choice);\n\n    case 'status':\n      if (request.method !== 'GET') {\n        return new Response('Method not allowed', {\n          status: 405,\n          headers: getCorsHeaders()\n        });\n      }\n      return await stub.getStatus();\n\n    case 'ws':\n      // WebSocket upgrade\n      const upgradeHeader = request.headers.get('Upgrade');\n      if (upgradeHeader !== 'websocket') {\n        return new Response('Expected Upgrade: websocket', {\n          status: 426,\n          headers: getCorsHeaders()\n        });\n      }\n      return await stub.handleWebSocket(request);\n\n    case 'start':\n      if (request.method !== 'POST') {\n        return new Response('Method not allowed', {\n          status: 405,\n          headers: getCorsHeaders()\n        });\n      }\n      const startData: StartGameRequest = await request.json();\n      return await stub.startGame(startData.deckId, startData.maxSlides);\n\n    default:\n      return new Response('Unknown action', {\n        status: 404,\n        headers: getCorsHeaders()\n      });\n  }\n}\n\nasync function createGameSession(request: Request, env: Env): Promise<Response> {\n  // Generate a random 6-character room code\n  const roomCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n\n  // Get the Durable Object instance using the room code as the name\n  const id = env.GAME_SESSION.idFromName(roomCode);\n  const stub = env.GAME_SESSION.get(id);\n\n  // Initialize the session\n  await stub.initialize();\n\n  return new Response(JSON.stringify({\n    sessionId: roomCode,\n    success: true\n  }), {\n    headers: {\n      'Content-Type': 'application/json',\n      ...getCorsHeaders()\n    }\n  });\n}\n\nasync function serveSlideImage(filename: string, slidesBucket: R2Bucket): Promise<Response> {\n  try {\n    const object = await slidesBucket.get(filename);\n\n    if (!object) {\n      return new Response('Image not found', {\n        status: 404,\n        headers: getCorsHeaders()\n      });\n    }\n\n    const headers = {\n      'Content-Type': object.httpMetadata?.contentType || 'image/jpeg',\n      'Cache-Control': 'public, max-age=86400', // Cache for 24 hours\n      ...getCorsHeaders()\n    };\n\n    return new Response(object.body, { headers });\n  } catch (error) {\n    console.error('Error serving slide image:', error);\n    return new Response('Error loading image', {\n      status: 500,\n      headers: getCorsHeaders()\n    });\n  }\n}\n\nfunction serveStaticFile(filename: string): Response {\n  // For now, return a simple HTML placeholder\n  // In production, you'd serve actual files from public/\n  const html = generatePlaceholderHTML(filename);\n\n  return new Response(html, {\n    headers: {\n      'Content-Type': 'text/html',\n      ...getCorsHeaders()\n    }\n  });\n}\n\nfunction generatePlaceholderHTML(filename: string): string {\n  const title = filename.replace('.html', '').toUpperCase();\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>Battle Decks - ${title}</title>\n        <style>\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                max-width: 800px;\n                margin: 0 auto;\n                padding: 20px;\n                background: #f5f5f5;\n            }\n            .container {\n                background: white;\n                padding: 40px;\n                border-radius: 12px;\n                box-shadow: 0 2px 20px rgba(0,0,0,0.1);\n                text-align: center;\n            }\n            .status {\n                background: #e8f5e8;\n                padding: 15px;\n                border-radius: 8px;\n                margin: 20px 0;\n                color: #2d5a2d;\n            }\n            button {\n                background: #0066cc;\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                cursor: pointer;\n                margin: 5px;\n            }\n            button:hover {\n                background: #0052a3;\n            }\n            input {\n                padding: 12px;\n                border: 2px solid #ddd;\n                border-radius: 8px;\n                font-size: 16px;\n                margin: 5px;\n                width: 200px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>\uD83C\uDFAE Battle Decks - ${title}</h1>\n            <div class=\"status\">\n                \u2705 SQLite-backed Durable Objects deployed successfully!<br>\n                \u2705 WebSocket Hibernation API ready!<br>\n                \u2705 2025 configuration active!\n            </div>\n\n            ${getPageContent(filename)}\n        </div>\n\n        <script>\n            // Basic functionality for testing\n            ${getPageScript(filename)}\n        </script>\n    </body>\n    </html>\n  `;\n}\n\nfunction getPageContent(filename: string): string {\n  switch (filename) {\n    case 'vote.html':\n      return `\n        <h2>\uD83D\uDDF3\uFE0F Audience Voting</h2>\n        <p>Join a game session by entering the room code:</p>\n        <input type=\"text\" id=\"roomCode\" placeholder=\"Enter room code\" maxlength=\"6\">\n        <button onclick=\"joinSession()\">Join Session</button>\n\n        <div id=\"votingPanel\" style=\"display: none; margin-top: 30px;\">\n          <h3>Vote for the next slide:</h3>\n          <button id=\"logicalBtn\" onclick=\"vote('logical')\" style=\"background: #28a745; margin: 10px;\">\n            \uD83D\uDCCA Logical\n          </button>\n          <button id=\"chaoticBtn\" onclick=\"vote('chaotic')\" style=\"background: #dc3545; margin: 10px;\">\n            \uD83C\uDFB2 Chaotic\n          </button>\n          <div id=\"voteStatus\"></div>\n        </div>\n      `;\n\n    case 'display.html':\n      return `\n        <h2>\uD83D\uDCFA Main Display</h2>\n        <p>This is where the presentation slides and vote counts will be displayed.</p>\n        <div id=\"slideContainer\" style=\"border: 2px dashed #ccc; padding: 40px; margin: 20px 0;\">\n          <p>Slide display area</p>\n          <div id=\"currentSlide\">No slide loaded</div>\n        </div>\n        <div id=\"voteDisplay\">\n          <p>Vote counts will appear here</p>\n        </div>\n      `;\n\n    case 'admin.html':\n      return `\n        <h2>\u2699\uFE0F Presenter Controls</h2>\n        <button onclick=\"createSession()\">Create New Session</button>\n        <button onclick=\"startGame()\">Start Game</button>\n        <div id=\"sessionInfo\" style=\"margin: 20px 0;\"></div>\n        <div id=\"gameStatus\"></div>\n      `;\n\n    default:\n      return `<p>Page placeholder for ${filename}</p>`;\n  }\n}\n\nfunction getPageScript(filename: string): string {\n  switch (filename) {\n    case 'vote.html':\n      return `\n        let currentSession = null;\n        let userId = 'user_' + Math.random().toString(36).substr(2, 9);\n\n        function joinSession() {\n          const roomCode = document.getElementById('roomCode').value.trim().toUpperCase();\n          if (!roomCode) return;\n\n          currentSession = roomCode;\n          document.getElementById('votingPanel').style.display = 'block';\n          console.log('Joined session:', roomCode);\n        }\n\n        async function vote(choice) {\n          if (!currentSession) return;\n\n          try {\n            const response = await fetch(\\`/session/\\${currentSession}/vote\\`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ userId, choice })\n            });\n\n            const result = await response.json();\n            document.getElementById('voteStatus').innerHTML =\n              result.success ? \\`\u2705 Vote cast for \\${choice}!\\` : \\`\u274C \\${result.error}\\`;\n          } catch (error) {\n            console.error('Vote error:', error);\n          }\n        }\n      `;\n\n    case 'admin.html':\n      return `\n        let currentSession = null;\n\n        async function createSession() {\n          try {\n            const response = await fetch('/create-session', { method: 'POST' });\n            const result = await response.json();\n\n            if (result.success) {\n              currentSession = result.sessionId;\n              document.getElementById('sessionInfo').innerHTML =\n                \\`\u2705 Session created: <strong>\\${result.sessionId}</strong>\\`;\n            }\n          } catch (error) {\n            console.error('Create session error:', error);\n          }\n        }\n\n        async function startGame() {\n          if (!currentSession) {\n            alert('Create a session first!');\n            return;\n          }\n\n          try {\n            const response = await fetch(\\`/session/\\${currentSession}/start\\`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ deckId: 'mock-deck', maxSlides: 5 })\n            });\n\n            const result = await response.json();\n            document.getElementById('gameStatus').innerHTML =\n              result.success ? '\u2705 Game started!' : \\`\u274C \\${result.error}\\`;\n          } catch (error) {\n            console.error('Start game error:', error);\n          }\n        }\n      `;\n\n    default:\n      return '// No script for this page';\n  }\n}\n\nfunction getCorsHeaders(): Record<string, string> {\n  return {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type',\n  };\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/scastoro/repos/battle-decks/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/scastoro/repos/battle-decks/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/scastoro/repos/battle-decks/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/scastoro/repos/battle-decks/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/scastoro/repos/battle-decks/.wrangler/tmp/bundle-Y0fWjc/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/scastoro/repos/battle-decks/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/scastoro/repos/battle-decks/.wrangler/tmp/bundle-Y0fWjc/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/scastoro/repos/battle-decks/.wrangler/tmp/bundle-Y0fWjc/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
